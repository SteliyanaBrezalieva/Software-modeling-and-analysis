CREATE DATABASE ShopSystemDB;
Use ShopSystemDB;

--------------------------------TABLES -----------------------------

CREATE TABLE Account(
   AccountID int IDENTITY(1,1) PRIMARY KEY,
   Username nvarchar(35) NOT NULL,
   Password char(30) NOT NULL,
   Email nvarchar(50) NOT NULL,
   Picture varbinary(max) NULL,
   Balance decimal(8,2)  NULL,
   CreatedOn datetime NULL,
   PromoCodes int NULL

);

CREATE TABLE Users(
   UserID int IDENTITY(1,1) PRIMARY KEY,
   FName nvarchar(50) NOT NULL,
   LName nvarchar(50) NOT NULL,
   Phone char(15) NULL,
   Gender char(1) NULL,
   Age int NULL
);

ALTER TABLE Users
ADD AccountID int;

ALTER TABLE Users
ADD CONSTRAINT
FK_Users_AccountID
FOREIGN KEY(AccountID) REFERENCES
Account(AccountID);

/*ALTER TABLE AccountUserID
ADD CONSTRAINT
FK_AccountUserID_Account_AccountID
FOREIGN KEY(AccountID) REFERENCES
Account(AccountID);

ALTER TABLE AccountUserID
ADD CONSTRAINT
FK_AccountUserID_Users_UserID
FOREIGN KEY(UserID) REFERENCES
Users(UserID);*/

CREATE TABLE Products(
    ProductID int IDENTITY(1,1) PRIMARY KEY,
	Name nvarchar(50) NOT NULL,
	Price decimal(8,2) NOT NULL,
	StockNumber nvarchar(50) NOT NULL,
	Trend nvarchar(30) NOT NULL,
	Quantity int NOT NULL,
	Specifications nvarchar(255) NULL,
	Description nvarchar(255) NULL,
	Image varbinary(max) NULL

);

CREATE TABLE Categories(
CategoryID int IDENTITY(1,1) PRIMARY KEY,
Name nvarchar(30) NOT NULL,
Image varbinary(max) NULL,
Description nvarchar(50) NOT NULL


);


CREATE TABLE SubCategory(
ID int IDENTITY(1,1) PRIMARY KEY,
Name nvarchar(30) NOT NULL,
Description text NULL,

);

ALTER TABLE SubCategory
ADD CategoryID int NOT NULL;

ALTER TABLE SubCategory
ADD CONSTRAINT
FK_SubCategory_CategoryID
FOREIGN KEY(CategoryID) REFERENCES
Category(CategoryID);

CREATE TABLE CategoryHasProduct(
   ID int IDENTITY(1,1) PRIMARY KEY,
   ProductID int NOT NULL,
   CategoryID int NOT NULL
);

ALTER TABLE CategoryHasProduct
ADD CONSTRAINT
FK_CategoryHasProduct_ProductID
FOREIGN KEY(ProductID) REFERENCES
Products(ProductID);

ALTER TABLE CategoryHasProduct
ADD CONSTRAINT
FK_CategoryHasProduct_CategoryID
FOREIGN KEY(CategoryID) REFERENCES
Category(CategoryID);


CREATE TABLE ShoppingCart(
CartID int IDENTITY(1,1) PRIMARY KEY,
UserID int NOT NULL,
NumberOfProducts int NULL,
CreatedOn datetime NULL,
UpdatedOn datetime NULL

);
ALTER TABLE ShoppingCart
ADD CONSTRAINT
FK_ShoppingCart_UserID
FOREIGN KEY(UserID) REFERENCES
Users(UserID);

CREATE TABLE CartHasProduct(
ID int IDENTITY(1,1) PRIMARY KEY,
CartID int NOT NULL,
ProductID int NOT NULL
);

ALTER TABLE CartHasProduct
ADD CONSTRAINT
FK_CartHasProduct_CartID
FOREIGN KEY(CartID) REFERENCES
ShoppingCart(CartID);


ALTER TABLE CartHasProduct
ADD CONSTRAINT
FK_CartHasProduct_ProductID
FOREIGN KEY(ProductID) REFERENCES
Products(ProductID);


CREATE TABLE ORDERS(
    OrderID int IDENTITY(1,1) PRIMARY KEY,
	Subtotal decimal(8,2) NOT NULL,
	ShippingFee decimal(8,2) NOT NULL,
	Total decimal(8,2) NOT NULL,
	Status text NOT NULL,
	Comment text NULL

);

ALTER TABLE Orders
ADD UserID int;

ALTER TABLE Orders
ADD CartID int;


ALTER TABLE Orders
ADD CONSTRAINT
FK_Orders_UserID
FOREIGN KEY(UserID) REFERENCES
Users(UserID);

ALTER TABLE Orders
ADD CONSTRAINT
FK_Orders_CartID
FOREIGN KEY(CartID) REFERENCES
ShoppingCart(CartID);

CREATE TABLE Payment(
  PaymentID int IDENTITY(1,1) PRIMARY KEY,
  PaymentMethod nvarchar(20) NOT NULL,
);

ALTER TABLE Orders
ADD PaymentID int;

ALTER TABLE Orders
ADD CONSTRAINT
FK_Orders_PaymentID
FOREIGN KEY(PaymentID) REFERENCES
Payment(PaymentID);


CREATE TABLE Delivery(
  DeliveryID int IDENTITY(1,1) PRIMARY KEY,
  Date datetime NOT NULL,
  OrderID int NOT NULL,
  AddressID int NOT NULL,
  DeliveryType nvarchar(20) NOT NULL,
  


);


ALTER TABLE Delivery
ADD CONSTRAINT
FK_Delivery_OrderID
FOREIGN KEY(OrderID) REFERENCES
Orders(OrderID);



CREATE TABLE Address(
  AddressID int IDENTITY(1,1) PRIMARY KEY,
  Country nvarchar(20) NOT NULL,
  Town nvarchar(30) NOT NULL,
  Street nvarchar(50) NOT NULL,
  ZipCode char(10) NULL
);


ALTER TABLE Users
ADD AddressID int;


ALTER TABLE Users
ADD CONSTRAINT
FK_Users_AddressID
FOREIGN KEY(AddressID) REFERENCES
Address(AddressID);



ALTER TABLE Delivery
ADD CONSTRAINT
FK_Delivery_AddressID
FOREIGN KEY(AddressID) REFERENCES
Address(AddressID);


CREATE TABLE Store(
	StoreID int IDENTITY(100,1) PRIMARY KEY,
	Name nvarchar(30) NOT NULL,
	ExtendedName nvarchar(100) NULL,
	Location nvarchar(50) NOT NULL
);


CREATE TABLE UserHasFavStores(
     ID int IDENTITY(1,1) PRIMARY KEY,
	 UserID int NOT NULL,
	 StoreID int NOT NULL

);


ALTER TABLE UserHasFavStores
ADD CONSTRAINT
FK_UserHadFavStore_UserID
FOREIGN KEY(UserID) REFERENCES
Users(UserID);

ALTER TABLE UserHasFavStores
ADD CONSTRAINT
FK_UserHadFavStore_StoreID
FOREIGN KEY(StoreID) REFERENCES
Store(StoreID);


CREATE TABLE WishList(
		ID int IDENTITY(1,1) PRIMARY KEY,
		UserID int NOT NULL,
		ProductID int NOT NULL,
		CategoryID int NOT NULL

);


ALTER TABLE WishList
ADD CONSTRAINT
FK_WishList_UserID
FOREIGN KEY(UserID) REFERENCES
Users(UserID);



ALTER TABLE WishList
ADD CONSTRAINT
FK_WishList_ProductID
FOREIGN KEY(ProductID) REFERENCES
Products(ProductID);


ALTER TABLE WishList
ADD CONSTRAINT
FK_WishList_CategoryID
FOREIGN KEY(CategoryID) REFERENCES
Category(CategoryID);




CREATE TABLE Attributes(
	AttributeID int IDENTITY(1,1) PRIMARY KEY,
	Color nvarchar(20) NULL,
	Size char(10) NULL,
	Weight decimal(6,2) NULL,
	Quantity int NULL


);


CREATE TABLE Coupon(
	CouponID int IDENTITY(1,1) PRIMARY KEY,
	Discount decimal(8,2) NOT NULL,
	Code nvarchar(20) NOT NULL,
	MinCartValue decimal(8,2) NOT NULL,
	ValidDate date NOT NULL,


);


ALTER TABLE Orders
ADD  CouponID int;

ALTER TABLE Orders
ADD CONSTRAINT
FK_Orders_CouponID
FOREIGN KEY(CouponID) REFERENCES
Coupon(CouponID);

__________________________________


				--------------INSERT DATA-------------

INSERT INTO Account
VALUES('real_name_hidden','123456','An@abv,bg',null,150.25,GETDATE(),null);


INSERT INTO Users

VALUES('Dimitra','Pavlova','0895486598','W',54,5,2);

INSERT INTO Account(Picture) 
SELECT BulkColumn 
FROM Openrowset( Bulk 'C:\Users\steli\OneDrive\Работен плот', Single_Blob);


SELECT Users.FName, Account.Username
FROM Users
INNER JOIN Account
ON Users.AccountID = Account.AccountID;


INSERT INTO Products
VALUES('Jewelry Box',22.80,'Jeht5674','Item Type: Jewelry Packaging & Display,Material: Leather,Big one: 12*12*12cm','Three Layers European Style Leather Travel Jewelry Box With Handles High Quality Velvet And PU',null);



INSERT INTO Category
VALUES('Men Fashion',null,'Men clothes and Accessories');



INSERT INTO Category
VALUES('Women Fashion',null,'Women clothes and Accessories');


INSERT INTO Category
VALUES('Beauty, Health & Hair',null,null);



ALTER TABLE Account
ADD CONSTRAINT
FK_Account_AddressID
FOREIGN KEY(AddressID) REFERENCES
Address(AddressID);


alter table Products
add constraint
FK_Products_SUbCategoryID
FOREIGN KEY(SubCategoryID) REFERENCES
SubCategory(ID);



INSERT INTO SubCategory
VALUES(NULL,'Dresses','Women category - dresses',17);


select c.Name as Category,sc.Name as SubCategory
from Category c
join Category sc
on c.CategoryID = sc.ParentID


alter table Category
add constraint
FK_Category_ParentID
FOREIGN KEY(ParentID) REFERENCES
Category(CategoryID)4


INSERT INTO Category
VALUES('Shorts','Bottoms',44);



select c.Name as Category, sc.Name as SubCategory
from Category c
join Category sc on c.CategoryID=sc.ParentID
WHERE c.Name = 'Womens Fashion';


SELECT child.CategoryID,
       child.Name,
       child.ParentID,
       parent.Name as ParentName
FROM Category child
JOIN Category parent ON child.ParentID = parent.CategoryID;


alter table Product
drop constraint [FK_Products_SUbCategoryID];


 alter table Products
add constraint
FK_Products_ParentID
FOREIGN KEY(ParentID) REFERENCES 
Category(ParentID)


create table StoreHasProducts
(
	StoreID int NOT NULL,
	ProductID int NOT NULL

);


ALTER TABLE StoreHasProducts
add constraint 
FK_StoreHasProducts_StoreID
FOREIGN KEY(StoreID)
REFERENCES Store(StoreID)


ALTER TABLE StoreHasProducts
add constraint 
FK_StoreHasProducts_ProductID
FOREIGN KEY(ProductID)
REFERENCES Products(ProductID)


-------------------------------------------------------------INSERT--------------------------------

insert into Account 
VALUES('Anast_56','anas1956','Anastasiya_Hr@abv.bg',160.55,GETDATE(),4,'Anastasiya','Hristova','0875469584','W',64,6)


Update Products 
set ParentID= 43
where ProductID=2


INSERT INTO Category
VALUES('Women Socks','Women  Underwear',46);


INSERT INTO Category
VALUES('Bra & Brief Sets','Women  Underwear',46);


INSERT INTO Category
VALUES('Shapewear','Women  Underwear',46);


INSERT INTO Category
VALUES('Hair Accessories','Accessories',47);

INSERT INTO Category
VALUES('Sunglasses','Accessories',47);


INSERT INTO Category
VALUES('Blue Light Blocking Glasses','Accessories',47);




INSERT INTO Category
VALUES('Baseball Caps','Accessories',47);

INSERT INTO Category
VALUES('Bucket Hats','Accessories',47);


INSERT INTO Category
VALUES('Belts','Accessories',47);






INSERT INTO Category
VALUES('Hot Sale','Men Fashion',18);

INSERT INTO Category
VALUES('Bottoms','Men Fashion',18);


INSERT INTO Category
VALUES('Outerwear & Jackets','Men Fashion',18);


INSERT INTO Category
VALUES('Underwear & Loungewear','Men Fashion',18);

INSERT INTO Category
VALUES('Accessories','Men Fashion',18);



INSERT INTO Category
VALUES('Novelty & Special Use','Men Fashion',18);

INSERT INTO Category
VALUES('Hoodies & Sweatchirts','Hot Sale',84);





INSERT INTO Category
VALUES('T-shirts','Hot Sale',84);


INSERT INTO Category
VALUES('Shirts','Hot Sale',84);




INSERT INTO Category
VALUES('Casual Shorts','Hot Sale',84);


INSERT INTO Category
VALUES('Men Sets','Hot Sale',84);


INSERT INTO Category
VALUES('Casual Pants','Bottoms',83);


INSERT INTO Category
VALUES('Sweatpants','Bottoms',83);


INSERT INTO Category
VALUES('Cargo Pants','Bottoms',83);

INSERT INTO Category
VALUES('Jeans','Bottoms',83);


INSERT INTO Category
VALUES('Harem Pants','Bottoms',83);

INSERT INTO Category
VALUES('Shorts','Bottoms',83);

INSERT INTO StoreHasProducts
VALUES(101,1)
INSERT INTO StoreHasProducts
VALUES(101,6)
INSERT INTO StoreHasProducts
VALUES(102,2)
INSERT INTO StoreHasProducts
VALUES(103,5)
INSERT INTO StoreHasProducts
VALUES(105,3)
INSERT INTO StoreHasProducts
VALUES(105,7)
INSERT INTO StoreHasProducts
VALUES(109,8)
INSERT INTO StoreHasProducts
VALUES(110,9)



------------------------------------------------------Procedure---------


CREATE PROCEDURE GetAllCategories
AS
BEGIN
SELECT
    c.Name as Category,
   sc.Name as SubCategory
FROM
Category c
JOIN Category sc
ON c.CategoryID = sc.ParentID
END;

EXECUTE GetAllCategories;

_______________________________

CREATE PROCEDURE GetProductCategory
AS
BEGIN
SELECT
    p.Name as Product,
    sc.Name as SubCategory,
	c.Name as Category
FROM
Products p 
JOIN Category sc
ON p.CategoryID = sc.CategoryID
JOIN Category c
ON c.CategoryID = sc.ParentID
END;

EXECUTE GetProductCategory;

___________________________________
CREATE PROCEDURE GetIdCategories
AS
BEGIN
SELECT
	c.CategoryID,
    c.Name as Category,
	sc.CategoryID,
   sc.Name as SubCategory
FROM
Category c
JOIN Category sc
ON c.CategoryID = sc.ParentID
END;

EXECUTE  GetIdCategories;

_______________________________

CREATE PROCEDURE GetUserProduct
AS
BEGIN
SELECT a.FName AS FName ,p.Name AS Product,c.Name AS Category,sc.Name AS SubCategory,sd.CartID 
FROM
Products p 
JOIN Category sc
ON p.CategoryID = sc.CategoryID
JOIN Category c
ON c.CategoryID = sc.ParentID
JOIN CartHasProduct chp 
ON chp.ProductID=p.ProductID
JOIN ShoppingCart sd 
ON sd.CartID=chp.CartID
JOIN Account a
ON a.AccountID=sd.AccountID
END;

_________________________________________
SELECT a.FName AS FName ,p.Name AS Product,c.Name AS Category,sc.Name AS SubCategory,sr.Name as Store,sd.CartID 
FROM
Products p 
JOIN Category sc
ON p.CategoryID = sc.CategoryID
JOIN Category c
ON c.CategoryID = sc.ParentID
JOIN CartHasProduct chp 
ON chp.ProductID=p.ProductID
JOIN StoreHasProducts st
ON st.ProductID = p.ProductID
JOIN Store sr
ON sr.StoreID=st.StoreID
JOIN ShoppingCart sd 
ON sd.CartID=chp.CartID
JOIN Account a
ON a.AccountID=sd.AccountID
END;











____________________________


INSERT INTO  ShoppingCart(NumberOfProducts,CreatedOn,AccountID)
VALUES(2,GETDATE(),7)




SELECT p.Name AS Product,c.Name AS Category,sc.Name AS SubCategory,a.FName AS FName ,sd.CartID 
FROM
Products p 
JOIN Category sc
ON p.CategoryID = sc.CategoryID
JOIN Category c
ON c.CategoryID = sc.ParentID
JOIN CartHasProduct chp 
ON chp.ProductID=p.ProductID
JOIN ShoppingCart sd 
ON sd.CartID=chp.CartID
JOIN Account a
ON a.AccountID=sd.AccountID

_____________________________________________________

CREATE PROCEDURE UserFavShop
AS
BEGIN
SELECT a.FName+' '+a.LNAme as Person_Name,s.Name as Store_Favourite_Name
FROM Account a
JOIN UserHasFavStores u
ON a.AccountID= u.AccountID
JOIN Store s
ON u.StoreID = s.StoreID
END;

EXECUTE UserFavShop


___________________________________________________________
CREATE PROCEDURE UserFavProduct
AS
BEGIN
SELECT a.FName+' '+a.LNAme as Person_Name,p.Name as Favourite_Product_Name
FROM Account a
JOIN WishList w
ON a.AccountID= w.AccountID
JOIN Products p
ON p.ProductID = w.ProductID
END;

EXECUTE UserFavProduct



				--------TRIGGER----------

CREATE TABLE ShoppingCartQuantity(
  ChangeID INT IDENTITY(1,1) PRIMARY KEY,
  CartID INT NOT NULL,
  ProductID INT NOT NULL,
  UpdatedAt DATETIME NOT NULL,
  OPERATION CHAR(3) NOT NULL,
  CHECK(OPERATION = 'INS' )



);

CREATE TRIGGER trigger_cart
ON CartHasProduct
AFTER INSERT
AS
BEGIN
  SET NOCOUNT ON;
  INSERT INTO ShoppingCartQuantity(
     CartID,
	 ProductID,
	 UpdatedAt,
	 OPERATION
  )
  SELECT 
    i.CartID,
	i.ProductID,
	GETDATE(),
	'INS'
	FROM
	inserted i

	END;

___________________________________________________________

 CREATE TRIGGER deleteProductFromCart
 ON Orders
 AFTER INSERT 
 AS 
 BEGIN
 SET NOCOUNT ON
 DELETE FROM CartHasProduct 
 WHERE CartID IN(SELECT CartID FROM Orders where CartID in (SELECT deleted.CartId from deleted))

END;



_______________________________ INSER DATA _______________________________

UPDATE Account
SET FName = 'Krasimira', LName = 'Hadjigenova', Phone='087 123 2123', Gender ='W', Age = 57,AddressID=2
WHERE AccountID=6;



-----------------------




INSERT INTO Products
values('Wedding Dress',92.75,'Q18071101-','Brand Name: QQ LoverActual Images: YesNeckline: SweetheartSleeve Length(cm): Sleeveless TrainOrigin: CN(Origin) Design: Lace UpItem Type: Wedding DressesSleeve Style: Off the Shoulder','QQ Lover 2021 White Off the Shoulder Vestido De Noiva Wedding Dress Train Custom-made Plus Size Bridal Tulle Mariage',NULL,NULL,66);

--------------





SELECT SUM(Price)
FROM Products p
JOIN CartHasProduct c
ON p.ProductID = c.ProductID
WHERE CartID = 1;


SELECT SUM(p.Price)+SUM(o.ShippingFee) as Total
FROM Products p
JOIN CartHasProduct c
ON p.ProductID = c.ProductID
JOIN Orders o
ON o.CartID = c.CartID
WHERE c.CartID=1;


INSERT INTO Orders
Values(2.35,14.03,'ordered',NULL,1,1 ,7)



alter table Delivery
add constraint 
FK_AccountID_Delivery
FOREIGN KEY(AccountID)
REFERENCES Account(AccountID)

insert into Delivery
values(GETDATE(),1,6,'express',7, (GETDATE()+7))



-----------------------------------------------------FUNCTION--------------------------------------------------------

CREATE FUNCTION quantityOfProducts(@CartID as int)
RETURNS int
AS
BEGIN
 DECLARE @quantityOfProducts int = 0;
 SELECT @quantityOfProducts =  COUNT(p.ProductID) 
 FROM Products p
 JOIN CartHasProduct c
 ON p.ProductID = c.ProductID
 JOIN ShoppingCart s 
 On s.CartID = c.CartID
 WHERE c.CartID = @CartID
 RETURN(@quantityOfProducts)
 END;

 SELECT dbo.quantityOfProductsInCart(1) as [Quantity of products in Cart];



______________________________

